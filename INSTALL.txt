------------------
-- Requirements --
------------------

First of all, the requirement to run this software is:
    * Django version 1.0 or greater.

    * The Python Imaging Library:
        * python-imaging package (on Debian or Ubuntu).
        * Source: http://www.pythonware.com/products/pil/

    * Optional: the Google Data API (allows image searching)
      Download it from http://code.google.com/p/gdata-python-client/

You can see a demo of which can be accomplished here:
    http://profile.coredump.es


-----------------
-- Quick guide --
-----------------

You can run the demo application supplied on this package on your own server to
make and idea of what can be accomplished with django-profile.
Follow these steps to make it run:

* Make django visible in your python path. You could import the last version
from the repository executing this command:
    $ svn co http://code.djangoproject.com/svn/django/trunk/django

* Make the "userprofile" module (supplied on this package) visible on your 
  PYTHONPATH.

* You need a valid e-mail server to try the e-mail validation process
  or password recovery utilities, and fill this information in the demo
  project 'settings.py' file:

# e-mail settings
DEFAULT_FROM_EMAIL = ''
EMAIL_HOST = ''
EMAIL_HOST_USER = ''
EMAIL_HOST_PASSWORD = ''

* You also need a valid Google Maps API Key so your users can use the Google 
  Maps positioning functionality. Obtain one for your site name here:

    http://www.google.com/apis/maps/signup.html

  Put the obtained key in the constant GOOGLE_MAPS_API_KEY located in the demo
  project 'settings.py' file.

* OPTIONAL. If you want to use the Picasa search for avatars, put this variable
  on the demo project 'settings.py' file.

    WEBSEARCH = True

  Then, download and put on the PYTHONPATH the Google Data APIs. 
  This will allow your users to select avatars directly from Picasaweb:
    $ wget http://gdata-python-client.googlecode.com/files/gdata.py-1.1.0.tar.gz
    $ tar zxvf gdata.py-1.1.0.tar.gz

    Now move the gdata.py-1.1.0/src/gdata and gdata.py-1.1.0/src/atom 
    directories to your PYTHONPATH.

* Once everything has been configured, you can start the the "demo" application:

	$ python manage.py syncdb (this creates a sqlite database)
and
	$ python manage.py runserver

* You can now connect to the django web server and try the demo. 

	http://127.0.0.1:8000


--------------------------
-- Custom install guide --
--------------------------

Once you've seen what can be done with this pluggable application, you could 
integrate django-profile with your custom software. Basically, you need to:

* Add this directive to the 'settings.py' file:
	AUTH_PROFILE_MODULE = 'userprofile.profile'

* Add this module to the INSTALLED_APPS section of your settings.py:
	'userprofile'

* Add this line to your urls.py file:

    (r'^accounts/', include('userprofile.urls')),

* Make the "media" directory accesible as your media content, or add the following line
  to urls.py to test it:

    # Serves media content. WARNING!! Only for development uses
    (r'^site_media/(?P<path>.*)$', 'django.views.static.serve', {'document_root': '../media/'}),

    This sample assumes that settings.MEDIA_URL="site_media", if you want to use another URI for
    the media content, you also need to change the paths /site_media/.. of the static content 
    files (CSS and javascript files).

* You will need to fill the e-mail server configuration of settings.py (if you didn't have it yet)
  to try the e-mail validation process.

* You will need a valid Google Maps API Key for your site. Put the key in the constant GOOGLE_MAPS_API_KEY located
  in the file 'settings.py'.

* Add the 'templates' directory to the TEMPLATES_DIRS section of your 'settings.py'. 
  You can also modify the default templates supplied with the modules 'account' and 'userprofile'

